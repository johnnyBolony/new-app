{"version":3,"sources":["Components/Input/Input.js","Components/ItemList/Item/Item.js","Components/ItemList/ItemList.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","id","onClick","click","Item","state","class","doneItem","setState","console","log","className","this","style","styles","val","remove","value","keyid","Component","ItemList","i","list","map","App","key","objList","text","addItem","newItem","document","getElementById","removeItem","event","index","target","splice","addEventListener","keyCode","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gUAuBeA,MAnBf,SAAeC,GAUX,OACI,6BAEI,2BAAOC,GAAG,cACV,4BAAQA,GAAG,QAAQC,QAASF,EAAMG,OAAlC,S,wBCcGC,E,2MA3BXC,MAAQ,CACJC,MAAQ,Q,EAGZC,SAAW,WAEP,EAAKC,SAAS,CAACF,MADE,SAEjBG,QAAQC,IAAR,iB,wEAIA,OACI,yBAAKC,UAAWC,KAAKP,MAAMC,MAAOO,MAAOC,KAASF,KAAKZ,MAAMe,IAC7D,yBAAMJ,UAAU,gBAEhB,4BAAQT,QAASU,KAAKZ,MAAMgB,OAAQC,MAAOL,KAAKZ,MAAMkB,MAAOP,UAAU,OAAvE,W,GAjBOQ,a,iBCiCJC,EAhCE,SAACpB,GAEd,IAAIqB,EAAI,EAER,OACI,oCACA,yBAAKV,UAAU,WAAWE,MAAOC,KACjC,4BAEId,EAAMsB,KAAKC,KAAI,SAAAR,GAKX,OAAO,kBAAC,EAAD,CAECG,MAAOG,IACPN,IAAKA,EACLC,OAAQhB,EAAMgB,gBCgGvBQ,E,2MApGbnB,MAAM,CAEJiB,KAAM,GACNG,IAAK,EACLC,QAAU,CACR,CACED,IAAK,EACLnB,MAAO,OACPqB,KAAM,e,EAyBZC,QAAU,WAGRnB,QAAQC,IAAI,EAAKL,MAAMqB,SACvB,EAAKlB,SAAL,sBAAkB,EAAKH,MAAMqB,SAA7B,CAAqC,QACrCjB,QAAQC,IAAI,EAAKL,MAAMqB,SAER,EAAKrB,MAAbiB,KAPO,IAQRO,EAAUC,SAASC,eAAe,aAAad,MAExC,KAAVY,IAMHC,SAASC,eAAe,aAAad,MAAQ,GAE7C,EAAKT,SAAS,CACZc,KAAK,GAAD,mBAAM,EAAKjB,MAAMiB,MAAjB,CAAsBO,Q,EAU9BG,WAAa,SAACC,GAEZ,IAAIX,EAAI,YAAO,EAAKjB,MAAMiB,MAEtBY,EAAQD,EAAME,OAAOlB,OAGb,IAATiB,IACDZ,EAAKc,OAAOF,EAAM,GAClBzB,QAAQC,IAAIY,GACZ,EAAKd,SAAS,CAACc,KAAMA,M,mFAhDXQ,SAASC,eAAe,aAClBM,iBAAiB,SAAS,SAASJ,GACjB,KAAlBA,EAAMK,UACTL,EAAMM,iBACNT,SAASC,eAAe,SAAS5B,c,+BAiDhD,OAEE,yBAAKQ,UAAU,eACjB,yBAAKA,UAAU,OACf,wBAAIA,UAAU,YAAd,sBACD,kBAAC,EAAD,CAAOR,MAAOS,KAAKgB,UACnB,kBAAC,EAAD,CACCH,IAAKb,KAAKP,MAAMoB,IAChBH,KAAQV,KAAKP,MAAMiB,KACnBN,OAAQJ,KAAKoB,mB,GAxFCb,aCJEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAShB,SAASC,eAAe,SD2H3C,kBAAmBgB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.326a80bc.chunk.js","sourcesContent":["import React from \"react\";\n\n\n\nfunction Input(props){\n\n    function tester(){\n        console.log(\"test\");\n    }\n\n    \n\n   \n\n    return (\n        <div>\n\n            <input id=\"itemInput\"  />\n            <button id=\"myBtn\" onClick={props.click}>Add</button>\n        </div>\n    )\n}\n\nexport default Input;","import React, {Component} from 'react';\nimport styles from './Item.css';\n\nclass Item extends Component {\n\n    state = {\n        class : \"Item\"\n    }\n\n    doneItem = ()=> {\n        const newClass = \"Done\";\n        this.setState({class:newClass});\n        console.log(this);\n    }\n\n    render(){\n        return(\n            <div className={this.state.class} style={styles}>{this.props.val} \n            <div  className=\"btnContainer\">\n\n            <button onClick={this.props.remove} value={this.props.keyid} className=\"btn\">X</button>\n            </div>\n            \n        \n            </div>\n            )\n    }\n    \n\n}\n\n// {<button className=\"btn\" onClick={this.doneItem}>V (done}</button>}\nexport default Item;","import React from 'react';\nimport Item from './Item/Item';\nimport styles from './ItemList.css';\n\nconst ItemList = (props)=> {\n\n    let i = 0;\n\n    return(\n        <>\n        <div className=\"ItemList\" style={styles}>\n        <ul >\n        {\n            props.list.map(val=>{\n               // console.log(i);\n                \n                \n\n                return <Item\n\n                        keyid={i++}\n                        val={val}\n                        remove={props.remove}\n                        \n                />\n                })\n        }\n        </ul>\n        </div>\n        </>\n        \n    )\n    \n\n}\n\nexport default ItemList;","import React, {Component} from 'react';\n\nimport './App.css';\nimport Input from './Components/Input/Input';\nimport ItemList from './Components/ItemList/ItemList';\n\n// let objList = [\n//     {\n//       class: \"Item\",\n//       text: \"Test text\"\n//     }\n//   ];\n\n//   console.log(objList);\n\n\nclass App extends Component {\n\n  state={\n\n    list: [],\n    key: 0,\n    objList : [\n      {\n        key: 1,\n        class: \"Item\",\n        text: \"Test text\",\n        \n      }]\n\n\n  }\n\n  // let objList = [\n  //   {\n  //     class: \"Item\",\n  //     text: \"Test text\"\n  //   }\n  // ];\n\n  componentDidMount(){\n    //console.log(\"test\");\n    let input = document.getElementById(\"itemInput\");\n                input.addEventListener(\"keyup\", function(event) {\n                  if (event.keyCode === 13) {\n                   event.preventDefault();\n                   document.getElementById(\"myBtn\").click();\n                  }\n                });\n  }\n\n  addItem = () => {\n    // e.preventDefault();\n\n    console.log(this.state.objList);\n    this.setState([...this.state.objList,\"aa\"]);\n    console.log(this.state.objList);\n\n    const {list} = this.state;\n    const newItem = document.getElementById(\"itemInput\").value;\n\n    if(newItem===''){\n\n      return;\n    }\n\n\n    document.getElementById(\"itemInput\").value = '';\n\n    this.setState({\n      list: [...this.state.list,newItem]\n    });\n\n\n    //console.log(\"Test\");\n  }\n\n  \n\n\n  removeItem = (event)=> {\n    //console.log(\"delete\");\n    let list = [...this.state.list];\n    //console.log(list);\n    let index = event.target.value;\n    //console.log(index);\n    //console.log(event.target.value);\n    if(index!==-1){\n      list.splice(index,1);\n      console.log(list);\n      this.setState({list: list});\n    }\n  }\n\n  render() {\n    return(\n\n      <div className=\"blurred-box\">\n    <div className=\"App\">\n    <h1 className=\"headline\">Johnny's ToDo List</h1>\n   <Input click={this.addItem}/>\n   <ItemList\n    key={this.state.key}\n    list = {this.state.list}\n    remove={this.removeItem}\n   />\n   </div>\n  </div>\n\n\n\n);\n    \n}\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}